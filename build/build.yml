
trigger:
- develop*
- master

pr:
- develop*

resources:
  repositories:
    - repository: congress
      type: git
      name: congress/templates

pool:
  name: $(AgentPool)
  demands: Delphi

jobs:
- job: Build
  displayName: Build and Package Artefacts
  workspace:
    clean: outputs
  steps:
  - template: delphi-build.yml@congress
    parameters:
      delphiVersion: xe4
      project: src\Binaries\ExeWithResources
      resources: [VersionInfoExe.rc]
      appType: CONSOLE
      platform: x86
      postBuild:
        powershell: Rename-Item "$(Build.BinariesDirectory)\ExeWithResources.exe" "$(Build.BinariesDirectory)\x86.exe"

  - template: delphi-build.yml@congress
    parameters:
      delphiVersion: xe4
      project: src\Binaries\ExeWithResources
      resources: [VersionInfoExe.rc]
      appType: CONSOLE
      platform: x64
      postBuild:
        powershell: Rename-Item "$(Build.BinariesDirectory)\ExeWithResources.exe" "$(Build.BinariesDirectory)\x64.exe"

  - template: delphi-build.yml@congress
    parameters:
      delphiVersion: xe4
      project: src\Binaries\DllWithResources
      resources: [VersionInfoDll.rc]
      appType: DLL
      platform: x86
      postBuild:
        powershell: Rename-Item "$(Build.BinariesDirectory)\DllWithResources.dll" "$(Build.BinariesDirectory)\x86.dll"

  - template: delphi-build.yml@congress
    parameters:
      delphiVersion: xe4
      project: src\Binaries\DllWithResources
      resources: [VersionInfoDll.rc]
      appType: DLL
      platform: x64
      postBuild:
        powershell: Rename-Item "$(Build.BinariesDirectory)\DllWithResources.dll" "$(Build.BinariesDirectory)\x64.dll"

  - powershell: |
      Remove-Item "src\Deltics.Pe.TestArtefacts\artefacts\x86.exe"
      Remove-Item "src\Deltics.Pe.TestArtefacts\artefacts\x64.exe"
      Remove-Item "src\Deltics.Pe.TestArtefacts\artefacts\x86.dll"
      Remove-Item "src\Deltics.Pe.TestArtefacts\artefacts\x64.dll"
      Copy-Item "$(Build.BinariesDirectory)\x86.exe" "src\Deltics.Pe.TestArtefacts\artefacts"
      Copy-Item "$(Build.BinariesDirectory)\x64.exe" "src\Deltics.Pe.TestArtefacts\artefacts"
      Copy-Item "$(Build.BinariesDirectory)\x86.dll" "src\Deltics.Pe.TestArtefacts\artefacts"
      Copy-Item "$(Build.BinariesDirectory)\x64.dll" "src\Deltics.Pe.TestArtefacts\artefacts"

  # NuGet tool installer
  # Acquires a specific version of NuGet from the internet or the tools cache and adds it to the PATH. Use this task to change the version of NuGet used in the NuGet tasks.
  - task: NuGetToolInstaller@1
    inputs:
      versionSpec: 5.9.1

  # The first task is the dotnet command build, pointing to our csproj file
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: 'build'
      arguments: '--configuration $(buildConfiguration)'
      projects: '**/*.csproj'
    
  # The second task is dotnet pack command again pointing to the csproj file
  # The nobuild means the project will not be compiled before running pack, because its already built in above step
  - task: DotNetCoreCLI@2
    displayName: "dotnet pack"
    inputs:
      command: 'pack'
      arguments: '--configuration $(buildConfiguration)'
      packagesToPack: '**/*.csproj'
      nobuild: true
      versioningScheme: 'off'

  # The last task is a nuget command, nuget push
  # This will push any .nupkg files to the 'TestFeed' artifact feed
  # allowPackageConflicts allows us to build the same version and not throw an error when trying to push
  # instead it just ingores the latest package unless the version changes
  - task: NuGetCommand@2
    displayName: 'nuget push (azure)'
    inputs:
      command: 'push'
      feedsToUse: 'select'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: 'Feed'
      versioningScheme: 'off'
      allowPackageConflicts: true

  - task: DotNetCoreCLI@2
    displayName: "push to nuget.org"
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType: 'external'
      publishFeedCredentials: 'NugetOrgApiKey'
